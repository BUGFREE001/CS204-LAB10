
#1

The difference is :

In w+ mode, If the file doesn't exist, it will create a new one.
Also, it truncates the file to zero length if it exists.

In r+ mode, If the file doesn't exist, it will not create a new one. It gives us an error.
If the file exists, it will append it to the end.


#include <stdio.h>
int main()
{
FILE *fp;
// open file in w+ mode  
fp = fopen("xyz.txt", "w+");
// write to the file
fprintf(fp, "This is testing for fprintf...\n");

// close the file
fclose(fp);
}





-------------------------------------------------------------------------------------------------------------------------------------




#2

#include <stdio.h>

void compare_two_binary(FILE *,FILE *);

int main(int argc,char *argv[])
{
   FILE *file1,*file2;

   if(argc < 3)
   {
       printf("\nArguments are not Sufficient\n");

   }
   else 
   {
       file1 = fopen(argv[1],"r"); 

       if(file1 == NULL)
       {
           printf("\nFile is not Valid \n",argv[1]);
           return;
       }

       file2 = fopen(argv[2],"r");
       if(file2 == NULL)
       {
           printf("\nFile is not Valid \n",argv[2]);
           return;
       }
       if((file1 != NULL) && (file2 != NULL))
       {
           compare_two_binary(file1,file2);
       }
   }
}

void compare_two_binary(FILE *file1,FILE *file2)
{
   char ch1,ch2;

   int flag = 0;//a variable for checking binaries
   while (((ch1 = fgetc(file1)) != EOF) &&((ch2 = fgetc(file2)) != EOF))
   {
       if(ch1 == ch2)
       {
           flag = 1;
           continue;
       }
       else 
       {
           fseek(file1,-1,SEEK_CUR);
           flag = 0;

       }
   }

   if(flag == 0)
   {
       printf("Two Binary files are not EQUAL\n First Byte poistion at which two files differ is %ld\n", ftell(file1)+1);
   }
   else
   {
       printf("Two files are EQUAL\n");
   }

}






-------------------------------------------------------------------------------------------------------------------------------------




#3  and  #4  below together



_______________________________

// numbers1.txt (input file)

78 43 89 67 75 90 34 97 78  89

_______________________________


#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void sort(int nos[],int cnt);

int main() {
FILE *f1;
int cnt=0,i=0,num;

//Opening the intput file in read mode
f1 = fopen("numbers1.txt", "r");
if (f1 == NULL) {
printf("** File not found **");
exit(1);
}
else
       {
           while(fscanf(f1, "%d", &num)!=EOF)
           {
               cnt++;
           }
           fclose(f1);
          
           int nos[cnt];
       f1 = fopen("numbers1.txt", "r");
       for(i=0;i<cnt;i++)
       {
          fscanf(f1, "%d", &nos[i]);
       }  
fclose(f1);
sort(nos,cnt);
  
f1 = fopen("numbers1.txt", "w");
for(i=0;i<cnt;i++)
{
   fprintf(f1,"%d ",nos[i]);
   if((i+1)%10==0)
   fprintf(f1,"\n");
       }
       fclose(f1);
}
   return 0;
  
}
void sort(int array[],int cnt)
{
       //This Logic will Sort the Array of elements in Ascending order
   int temp,i,j;
   for (i = 0; i < cnt; i++)
{
for (j = i + 1; j < cnt; j++)
{
if (array[i] > array[j])
{
temp = array[i];
array[i] = array[j];
array[j] = temp;
}
}
}
}

______________________________________________



-----------------------------------------------------------------------------------------



______________________________________________


numbers.txt (input file)

143 11 286 37 173 234 -265 -286 85 186
267 266 62 -139 -3 80 -225 10 141 142
166 241 -26 3 -167 76 169 31 -27 167
17 -65 77 -32 13 265 46 245 -261 22

_______________________________________________

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

void sort(int nos[],int cnt);

int main() {
FILE *f1;
const int SIZE=20;
int cnt=0,i=0,num;

//Opening the intput file in read mode
f1 = fopen("numbers.txt", "r");
if (f1 == NULL) {
printf("** File not found **");
exit(1);
}
else
       {
           int nos[SIZE];
           while(fscanf(f1, "%d", &num)!=EOF)
           {
               cnt++;
           }
           fclose(f1);
          
           if(cnt>SIZE)
           {
               cnt=SIZE;
           }
          
       f1 = fopen("numbers.txt", "r");
       for(i=0;i<cnt;i++)
       {
          fscanf(f1, "%d", &nos[i]);
       }  
fclose(f1);
sort(nos,cnt);
  
f1 = fopen("numbers.txt", "w");
for(i=0;i<cnt;i++)
{
   fprintf(f1,"%d ",nos[i]);
   if((i+1)%10==0)
   fprintf(f1,"\n");
       }
       fclose(f1);
}
   return 0;
  
}
void sort(int array[],int cnt)
{
       //This Logic will Sort the Array of elements in Ascending order
   int temp,i,j;
   for (i = 0; i < cnt; i++)
{
for (j = i + 1; j < cnt; j++)
{
if (array[i] > array[j])
{
temp = array[i];
array[i] = array[j];
array[j] = temp;
}
}
}
}

_____________________________________________









-------------------------------------------------------------------------------------------------------------------------------------




#5


#include <stdio.h>
#include <stdlib.h>

void mergeArrays(int arr1[], int arr2[], int n1,
int n2, int arr3[])
{
int i = 0, j = 0, k = 0;
  
// Traverse both array
while (i<n1 && j <n2)
{
// Check if current element of first
// array is smaller than current element
// of second array. If yes, store first
// array element and increment first array
// index. Otherwise do same with second array
if (arr1[i] < arr2[j])
arr3[k++] = arr1[i++];
else
arr3[k++] = arr2[j++];
}
  
// Store remaining elements of first array
while (i < n1)
arr3[k++] = arr1[i++];
  
// Store remaining elements of second array
while (j < n2)
arr3[k++] = arr2[j++];
}
int main()
{
FILE *fptr; // this file pointer is used to print combined sorted integer
FILE *filea = fopen("integersa.txt", "r"); // opeaning 1st integer file
int integersa[100]; // declaring 1st array to store integera.txt file integers
int i=0;
int num;
while(fscanf(filea, "%d", &num) > 0) { // scanning from file line by line
integersa[i] = num; // filling integersa
i++;
}
fclose(filea); // closing file
FILE *fileb = fopen("integersb.txt", "r");
int integersb[100];
i=0;
int numb;
while(fscanf(fileb, "%d", &numb) > 0) {
integersb[i] = numb;
i++;
}
fclose(fileb);
int arr3[11]; // declaring array that will contain combined sorted content
mergeArrays(integersa, integersb, 7, 4, arr3); // calling merge array function that we created above
fptr = (fopen("sorted_merged.txt", "w")); // we will print sorted merged content to this file
if(fptr == NULL)
{
printf("Error!");
exit(1);
}

for(i = 0; i < 11; ++i)
{

fprintf(fptr,"%d \n",arr3[i]); // printing to sorted_merged file
}
fclose(fptr);
return 0;
}



















#6


// Before running this program create the two text files and enter them along with their extension when asked at the console.
// Also note that the filename should be less than 100.




#include <stdio.h>
#include <stdlib.h>
#include <string.h> 

int main()
{
FILE *frd;
FILE *fwrite;

int char_count;
int length;
int i;
int temp,temp2;
char filename[100], filename1[100],*C;


printf("Enter the filename to open \n");
scanf("%s", filename);
printf("Enter the max line size(no of chars) \n");
scanf("%d",&char_count);
printf("Enter the filename to write the output \n");
scanf("%s", filename1);


// Open input file
frd = fopen(filename, "r");
//Open output file
fwrite = fopen(filename1, "w");
       //handle the case when input or output file does not exist.
if (frd == NULL||(fwrite == NULL))
{
printf("Cannot open file \n");
exit(0);
}

//start reading from input file
if (frd)
{
fseek (frd, 0, SEEK_END);
length = ftell (frd);
fseek (frd, 0, SEEK_SET);
C = malloc (length);
if (C)
{
fread (C, 1, length, frd);
}
fclose (frd);
}

//C stores the content of entire file
//traverse the string from the begining

temp2 =0; // temp2 will keep track of the character in each line
for(i=0;i<=(strlen(C));i++)
{
temp2++;
   if(temp2 == char_count+1)
   {
       C[temp]='\n';
       temp2 =i - temp;
       }

else if(C[i]==' ')
{
   temp =i;
}

}

//write the contents to the file
fprintf(fwrite,C);
  
return 0;
}














